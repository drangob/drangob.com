{"version":3,"sources":["no_cover.jpg","MusicDisplay.jsx","Sidebar.jsx","Wrapper.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","MusicDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nowPlaying","songName","undefined","artist","imageUrl","pending","getMusicDetails","_callee","response","jsonResponse","_jsonResponse$recentt","name","attrib","image","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","recenttracks","track","_this2","setState","length","stop","setInterval","e","console","log","react_default","createElement","className","height","width","src","NoCover","React","Component","SidebarInfoContainer","title","children","src_MusicDisplay_0","Sidebar","Wrapper","App","src_Wrapper","src_Sidebar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uTC2DzBC,qBArDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAY,EACZC,cAAUC,EACVC,YAAQD,EACRE,cAAUF,EACVG,SAAS,GAPKb,wMAYVc,wCAAkB,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAP,EAAAQ,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACCC,MAAM,mIADP,cAChBZ,EADgBS,EAAAI,KAAAJ,EAAAE,KAAA,EAEKX,EAASc,OAFd,OAEhBb,EAFgBQ,EAAAI,KAAAX,EAGyBD,EAAac,aAAaC,MAAM,GAAxErB,EAHeO,EAGfP,OAAQQ,EAHOD,EAGPC,KAAeC,EAHRF,EAGD,SAAiBG,EAHhBH,EAGgBG,MAClCD,EACFa,EAAKC,SAAS,CACZ1B,YAAY,EACZC,SAAUU,EACVR,OAAQA,EAAO,SACfC,SAAUS,EAAMA,EAAMc,OAAO,GAAG,WAGlCF,EAAKC,SAAS,CAAC1B,YAAY,IAE7ByB,EAAKC,SAAS,CAACrB,SAAS,IAdF,wBAAAY,EAAAW,SAAArB,2DAiBxB,IACED,IACAuB,YAAYvB,EAAiB,KAC7B,MAAOwB,GACPC,QAAQC,IAAIF,iIAKd,OACEG,EAAAlB,EAAAmB,cAAA,WACGvC,KAAKI,MAAMM,QACV4B,EAAAlB,EAAAmB,cAAA,0BACAvC,KAAKI,MAAMC,WACTiC,EAAAlB,EAAAmB,cAAA,2BAAmBvC,KAAKI,MAAME,SAA9B,OAA4CN,KAAKI,MAAMI,QAEvD8B,EAAAlB,EAAAmB,cAAA,+CAEJD,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,aAAYF,EAAAlB,EAAAmB,cAAA,OAAKE,OAAQ,IAAKC,MAAO,IAAKC,IAAM3C,KAAKI,MAAMC,YAAcL,KAAKI,MAAMK,UAAYmC,eAhD5FC,IAAMC,YCQjC,SAASC,EAAqBnD,GAAM,IAEhCoD,EAEEpD,EAFFoD,MACAC,EACErD,EADFqD,SAEF,OACEX,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,aACbF,EAAAlB,EAAAmB,cAAA,UAAKS,GACJC,EACDX,EAAAlB,EAAAmB,cAACW,EAAD,OAMSC,MAvBf,SAAiBvD,GACf,OACE0C,EAAAlB,EAAAmB,cAAA,aACED,EAAAlB,EAAAmB,cAACQ,EAAD,CAAsBC,MAAM,kBCInBI,MARf,SAAiBxD,GACf,OACE0C,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,WACZ5C,EAAMqD,WCKEI,MARf,WACE,OACEf,EAAAlB,EAAAmB,cAACe,EAAD,KACEhB,EAAAlB,EAAAmB,cAACgB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAlB,EAAAmB,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.752711af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_cover.3abe8976.jpg\";","import React from 'react';\r\n\r\nimport NoCover from './no_cover.jpg';\r\nimport './MusicDisplay.css';\r\n\r\nclass MusicDisplay extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      nowPlaying: false,\r\n      songName: undefined,\r\n      artist: undefined,\r\n      imageUrl: undefined,\r\n      pending: true,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const getMusicDetails = async () => {\r\n      const response = await fetch(\"http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=drangob&api_key=90225bae78876a0c8dbfa35bf25e90b5&format=json\");\r\n      const jsonResponse = await response.json();\r\n      const {artist, name, '@attr': attrib, image} = jsonResponse.recenttracks.track[0];\r\n      if (attrib) {\r\n        this.setState({\r\n          nowPlaying: true,\r\n          songName: name,\r\n          artist: artist[\"#text\"],\r\n          imageUrl: image[image.length-1][\"#text\"],\r\n        });\r\n      } else {\r\n        this.setState({nowPlaying: false});\r\n      }\r\n      this.setState({pending: false});\r\n    }\r\n\r\n    try {\r\n      getMusicDetails();\r\n      setInterval(getMusicDetails, 5000);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.pending ? \r\n          <span>LOADING...</span> :\r\n          this.state.nowPlaying ? \r\n            <span>Now playing {this.state.songName} by {this.state.artist}</span>\r\n            :\r\n            <span>Not currently playing any music</span>\r\n        }\r\n        <div className=\"cover-art\"><img height={256} width={256} src={ this.state.nowPlaying && this.state.imageUrl || NoCover} /></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MusicDisplay;","import React from 'react';\r\n\r\nimport './Sidebar.css'\r\nimport MusicDisplay from './MusicDisplay';\r\n\r\nfunction Sidebar(props){\r\n  return (\r\n    <aside>\r\n      <SidebarInfoContainer title='Music'/>\r\n    </aside>    \r\n  )\r\n}\r\n\r\nfunction SidebarInfoContainer(props){\r\n  const {\r\n    title,\r\n    children,\r\n  } = props;\r\n  return (\r\n    <div className='container'>\r\n      <h2>{title}</h2>\r\n      {children}\r\n      <MusicDisplay />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\n\r\nimport './Wrapper.css';\r\n\r\nfunction Wrapper(props){\r\n  return(\r\n    <div className='wrapper'>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport Sidebar from './Sidebar.jsx';\r\nimport Wrapper from './Wrapper.jsx';\r\n\r\nfunction App() {\r\n  return (\r\n    <Wrapper>\r\n      <Sidebar />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}