{"version":3,"sources":["no_cover.jpg","MusicDisplay.jsx","Sidebar.jsx","Wrapper.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","__webpack_require__","p","MusicDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","nowPlaying","songName","undefined","artist","imageUrl","pending","getMusicDetails","_callee","response","jsonResponse","_jsonResponse$recentt","name","attrib","image","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","recenttracks","track","_this2","setState","length","stop","setInterval","e","console","log","react_default","createElement","className","height","width","src","NoCover","alt","React","Component","SidebarInfoContainer","title","children","src_MusicDisplay_0","Sidebar","Wrapper","App","src_Wrapper","src_Sidebar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uTCoEzBC,qBA9Db,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAY,EACZC,cAAUC,EACVC,YAAQD,EACRE,cAAUF,EACVG,SAAS,GAPKb,wMAYVc,wCAAkB,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAP,EAAAQ,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACCC,MAAM,oIADP,cAChBZ,EADgBS,EAAAI,KAAAJ,EAAAE,KAAA,EAEKX,EAASc,OAFd,OAEhBb,EAFgBQ,EAAAI,KAAAX,EAGyBD,EAAac,aAAaC,MAAM,GAAxErB,EAHeO,EAGfP,OAAQQ,EAHOD,EAGPC,KAAeC,EAHRF,EAGD,SAAiBG,EAHhBH,EAGgBG,MAClCD,EACFa,EAAKC,SAAS,CACZ1B,YAAY,EACZC,SAAUU,EACVR,OAAQA,EAAO,SACfC,SAAUS,EAAMA,EAAMc,OAAO,GAAG,WAGlCF,EAAKC,SAAS,CAAC1B,YAAY,IAE7ByB,EAAKC,SAAS,CAACrB,SAAS,IAdF,wBAAAY,EAAAW,SAAArB,2DAiBxB,IACED,IACAuB,YAAYvB,EAAiB,KAC7B,MAAOwB,GACPC,QAAQC,IAAIF,iIAKd,OACEG,EAAAlB,EAAAmB,cAAA,WACED,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,gBACZxC,KAAKI,MAAMM,QACV4B,EAAAlB,EAAAmB,cAAA,0BACAvC,KAAKI,MAAMC,WACTiC,EAAAlB,EAAAmB,cAAA,2BAAkBD,EAAAlB,EAAAmB,cAAA,WAAMvC,KAAKI,MAAME,SAAnC,OAAiDN,KAAKI,MAAMI,QAE5D8B,EAAAlB,EAAAmB,cAAA,gDAGND,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,aACbF,EAAAlB,EAAAmB,cAAA,OACEE,OAAQ,IACRC,MAAO,IACPC,IAAO3C,KAAKI,MAAMC,YAAcL,KAAKI,MAAMK,UAAamC,IACxDC,IAAI,2BAvDWC,IAAMC,YCQjC,SAASC,EAAqBpD,GAAM,IAEhCqD,EAEErD,EAFFqD,MACAC,EACEtD,EADFsD,SAEF,OACEZ,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,aACbF,EAAAlB,EAAAmB,cAAA,UAAKU,GACJC,EACDZ,EAAAlB,EAAAmB,cAACY,EAAD,OAMSC,MAvBf,SAAiBxD,GACf,OACE0C,EAAAlB,EAAAmB,cAAA,aACED,EAAAlB,EAAAmB,cAACS,EAAD,CAAsBC,MAAM,kBCInBI,MARf,SAAiBzD,GACf,OACE0C,EAAAlB,EAAAmB,cAAA,OAAKC,UAAU,WACZ5C,EAAMsD,WCKEI,MARf,WACE,OACEhB,EAAAlB,EAAAmB,cAACgB,EAAD,KACEjB,EAAAlB,EAAAmB,cAACiB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAlB,EAAAmB,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cf46460b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_cover.3abe8976.jpg\";","import React from 'react';\n\nimport NoCover from './no_cover.jpg';\nimport './MusicDisplay.css';\n\nclass MusicDisplay extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      nowPlaying: false,\n      songName: undefined,\n      artist: undefined,\n      imageUrl: undefined,\n      pending: true,\n    };\n  }\n\n  async componentDidMount() {\n    const getMusicDetails = async () => {\n      const response = await fetch(\"https://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=drangob&api_key=90225bae78876a0c8dbfa35bf25e90b5&format=json\");\n      const jsonResponse = await response.json();\n      const {artist, name, '@attr': attrib, image} = jsonResponse.recenttracks.track[0];\n      if (attrib) {\n        this.setState({\n          nowPlaying: true,\n          songName: name,\n          artist: artist[\"#text\"],\n          imageUrl: image[image.length-1][\"#text\"],\n        });\n      } else {\n        this.setState({nowPlaying: false});\n      }\n      this.setState({pending: false});\n    }\n\n    try {\n      getMusicDetails();\n      setInterval(getMusicDetails, 5000);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"playing-info\">\n          {this.state.pending ? \n            <span>LOADING...</span> :\n            this.state.nowPlaying ? \n              <span>Now playing:<br/>{this.state.songName} by {this.state.artist}</span>\n              :\n              <span>Not currently playing any music</span>\n          }\n        </div>\n        <div className=\"cover-art\">\n          <img\n            height={256}\n            width={256}\n            src={ (this.state.nowPlaying && this.state.imageUrl) || NoCover}\n            alt=\"Album artwork\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MusicDisplay;","import React from 'react';\n\nimport './Sidebar.css'\nimport MusicDisplay from './MusicDisplay';\n\nfunction Sidebar(props){\n  return (\n    <aside>\n      <SidebarInfoContainer title='Music'/>\n    </aside>    \n  )\n}\n\nfunction SidebarInfoContainer(props){\n  const {\n    title,\n    children,\n  } = props;\n  return (\n    <div className='container'>\n      <h2>{title}</h2>\n      {children}\n      <MusicDisplay />\n    </div>\n  )\n}\n\n\nexport default Sidebar;\n","import React from 'react';\n\nimport './Wrapper.css';\n\nfunction Wrapper(props){\n  return(\n    <div className='wrapper'>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport Sidebar from './Sidebar.jsx';\nimport Wrapper from './Wrapper.jsx';\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Sidebar />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}